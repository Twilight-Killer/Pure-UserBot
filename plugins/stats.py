import aiohttp
from pyrogram import Client, filters
from pyrogram.types import Message
from utils.filters import command
from utils.scripts import get_args
from bs4 import BeautifulSoup as BS
from datetime import datetime

async def fetch_page(url: str) -> BS:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π GET-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç BeautifulSoup."""
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            response.raise_for_status() 
            html = await response.text()
            return BS(html, 'html.parser')

def days_to_season_end():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º."""
    date1 = datetime.now()
    date2 = datetime(day=3, month=3, year=2023)
    countdown = (date2 - date1).days
    days_word = ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']
    p = 0 if countdown % 10 == 1 and countdown % 100 != 11 else (
        1 if 2 <= countdown % 10 <= 4 and (countdown % 100 < 10 or countdown % 100 >= 20) else 2)
    return f"{countdown} {days_word[p]}"

@Client.on_message(~filters.scheduled & command(["stats"]) & filters.me & ~filters.forwarded)
async def handler(_, message: Message):
    if message.from_user.id == 183416928:
        await message.answer('poshel naxyi', reply_to=message.id)
        return

    args, _ = get_args(message)
    nick = args[0]
    url = f'https://iccup.com/dota/gamingprofile/{nick}'
    
    try:
        soup = await fetch_page(url)
        text = soup.find('div', id='main-stata-5x5')
        if not text:
            await message.answer('–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_to=message.id)
            return
        
        stats = text.text.replace('\n', ' ').split()
        main = (
            f"üîÆ –†–ï–ô–¢–ò–ù–ì –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
            f"üî∞ –õ–æ–≥–∏–Ω: {nick}\n"
            f"üîù –ü–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {stats[21]}\n"
            f"üèÜ –†–∞–Ω–∫ (pts): {stats[0]}\n"
            f"‚öîÔ∏è K/D/A: {stats[3]} / {stats[5]} / {stats[7]} K {stats[9]}\n"
            f"‚ùá Win/Lose/Leave: {stats[27]} / {stats[29]} / {stats[31]}\n"
            f"üêä –ù–µ–π—Ç—Ä–∞–ª–æ–≤ —É–±–∏—Ç–æ: {stats[37]}\n"
            f"üêî –ö—É—Ä—å–µ—Ä–æ–≤ —É–±–∏—Ç–æ: {stats[34]}\n"
            f"‚è∞ –ù–∞–ª—ë—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã: {stats[40]}\n"
            f"üëë –ü–æ–±–µ–¥—ã: {stats[42]}\n"
            f"üí§ –ö–æ–ª-–≤–æ –ª–∏–≤–æ–≤: {stats[45]}\n"
            f"üìä –õ—É—á—à–∏–π —Å—á—ë—Ç: {stats[48]} - {stats[50]} - {stats[52]}\n"
            f"üî± –ú–∞–∫—Å. —Å—Ç—Ä–∏–∫ –ø–æ–±–µ–¥: {stats[56]}\n"
            f"‚öú –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {stats[59]}\n"
            f"<emoji id=5276137821558548459>üñºÔ∏è</emoji> –ì—Ä—É–ø–ø–∞ {ds}\n"
            f"‚è≥ –ö–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ —á–µ—Ä–µ–∑: {days_to_season_end()}\n"
        )
        await message.answer(main, reply_to=message.id)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}", reply_to=message.id)

@Client.on_message(~filters.scheduled & command(["last"]) & filters.me & ~filters.forwarded)
async def lastgame(_, message: Message):
    if message.from_user.id == 183416928:
        await message.answer('poshel naxyi', reply_to=message.id)
        return

    args, _ = get_args(message)
    try:
        nick = args[0]
        url = f'https://iccup.com/dota/gamingprofile/{nick}'
        soup = await fetch_page(url)
        games = soup.find('tbody', id='result-table').find_all('td', limit=5)
        alls = f'–ü–û–°–õ–ï–î–ù–Ø–Ø –ò–ì–†–ê\n\nüë®‚Äçüíª –õ–æ–≥–∏–Ω: {nick}\nüßú –ì–µ—Ä–æ–π: {games[0].text.strip()}\nüëü –ú–æ–¥: {games[1].text.strip()}\n‚è∞ –í—Ä–µ–º—è: {games[2].text.strip()}\n‚öîÔ∏è K/D/A: {games[3].text.strip()}\nüî• –û—á–∫–∏: {games[4].text.strip()} PTS\n\n‚è≥ –ö–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ —á–µ—Ä–µ–∑: {days_to_season_end()}'
        await message.answer(alls, reply_to=message.id)
    except IndexError:
        await message.answer('–ò–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª', reply_to=message.id)

@Client.on_message(~filters.scheduled & command(["top"]) & filters.me & ~filters.forwarded)
async def top(_, message: Message):
    if message.from_user.id == 183416928:
        await message.answer('poshel naxyi', reply_to=message.id)
        return

    url = 'https://iccup.com/dota/ladder'
    soup = await fetch_page(url)
    find_pts_players = soup.find_all('div', class_="field2 width70p10", limit=5)
    find_stats_players = soup.find_all('div', class_="field2 width80c", limit=5)
    find_wrl_players = soup.find_all('div', class_="field2 width80r", limit=5)
    find_players = soup.find_all('div', class_='field2 width210 ladder-flag', limit=5)

    toplist = []
    for i in range(5):
        a = f'#{i+1} {find_players[i].text.strip()} {find_pts_players[i].text.strip()} {find_stats_players[i].text.strip()} {find_wrl_players[i].text.strip()}'
        toplist.append(a)
    
    out = f'‚Ññ | –ò–≥—Ä–æ–∫ | –û—á–∫–∏ | –°—Ç–∞—Ç–∞ | –ü–æ–±–µ–¥–∞\n' + '\n'.join(toplist)
    await message.answer(out, reply_to=message.id)

@Client.on_message(~filters.scheduled & command(["ladder"]) & filters.me & ~filters.forwarded)
async def ladder(_, message: Message):
    if message.from_user.id == 183416928:
        await message.answer('poshel naxyi', reply_to=message.id)
        return

    url = 'https://iccup.com/dota/teams.html'
    soup = await fetch_page(url)
    find_pts_teams = soup.find_all('div', class_="field2 width70", limit=10)
    find_stats_teams = soup.find_all('div', class_="field2 width70c", limit=10)
    find_wrl_teams = soup.find_all('div', class_="field2 width90c", limit=5)
    find_teams = soup.find_all('div', class_='field2 width200', limit=5)

    toplist = []
    com = [find_stats_teams[n].text.strip() + '  ' + find_stats_teams[n+1].text.strip() for n in range(0, 10, 2)]
    com2 = [find_pts_teams[j].text.strip() for j in range(0, 10)]
    del com2[:-1:2]
    
    for i in range(5):
        a = f'#{i+1} {find_teams[i].text.strip()} {find_wrl_teams[i].text.strip()} {com2[i]} {com[i]}'
        toplist.append(a)

    out = f'‚Ññ | –ö–æ–º–∞–Ω–¥–∞ | –ò–≥—Ä–æ–∫–∏ | –°—Ç–∞—Ç–∞ | –ü–æ–±–µ–¥–∞\n' + '\n'.join(toplist)
    await message.answer(out, reply_to=message.id)

@Client.on_message(~filters.scheduled & command(["profile"]) & filters.me & ~filters.forwarded)
async def profile(_, message: Message):
    args, _ = get_args(message)
    if message.from_user.id == 183416928:
        await message.answer('poshel naxyi', reply_to=message.id)
        return

    try:
        nick = args[0]
        url = f'https://iccup.com/profile/view/{nick}'
        soup = await fetch_page(url)
        text = soup.find('div', class_='allinfo width395')
        mesto = text.find('span', class_="user-flag").find('a').attrs['title']
        p1 = text.find('div', class_='infoblock-tbl')
        p3 = p1.find_all(class_='nth-2')
        key = [h.text for h in p3]
        profile = (
            f"üîÆ –ü–†–û–§–ò–õ–¨ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
            f"üë®‚Äçüíª –õ–æ–≥–∏–Ω: {nick}\n"
            f"üó£ –ù–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è: {key[0]}\n"
            f"üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {mesto} ({key[1]})\n"
            f"üí¨ –°–∫–∞–π–ø: {key[2]}\n"
            f"üü£ –î–∏—Å–∫–æ—Ä–¥: {key[3]}\n"
            f"üîµ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: {key[4]}\n"
            f"üëÄ –í–æ–∑—Ä–∞—Å—Ç: {key[5]}\n"
            f"üñ± –ú—ã—à–∫–∞: {key[6]}\n"
            f"‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {key[7]}\n"
            f"üéß –ù–∞—É—à–Ω–∏–∫–∏: {key[8]}\n"
            f"üå´Ô∏è –ö–æ–≤—Ä–∏–∫: {key[9]}\n\n"
            f"‚è≥ –ö–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ —á–µ—Ä–µ–∑: {days_to_season_end()}"
        )
        await message.answer(profile, reply_to=message.id)
    except AttributeError:
        await message.answer('–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', reply_to=message.id)

@Client.on_message(~filters.scheduled & command(["last5"]) & filters.me & ~filters.forwarded)
async def lastgames(_, message: Message):
    args, _ = get_args(message)
    if message.from_user.id == 183416928:
        await message.answer('poshel naxyi', reply_to=message.id)
        return

    try:
        nick = args[0]
        url = f'https://iccup.com/dota/gamingprofile/{nick}'
        soup = await fetch_page(url)
        games = soup.find('tbody', id='result-table').find_all('td', limit=5)

        last5 = []
        for game in games[:5]:
            last5.append(f'üßú –ì–µ—Ä–æ–π: {game.text.strip()}\n')

        await message.answer('–ü–û–°–õ–ï–î–ù–ò–ï 5 –ò–ì–†\n\n' + '\n'.join(last5), reply_to=message.id)
    except IndexError:
        await message.answer('–ò–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª', reply_to=message.id)
